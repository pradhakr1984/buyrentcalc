"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/calc.ts":
/*!*********************!*\
  !*** ./lib/calc.ts ***!
  \*********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculate: function() { return /* binding */ calculate; }\n/* harmony export */ });\nfunction calculate(inputs) {\n    const { purchasePrice, downPaymentPct, mortgageRatePct, mortgageTermYears, monthlyRent, altReturnPct, propertyTaxPct, homeAppreciationPct, maintenancePct = 0.01, insuranceHOAAnnual = 1800, rentInflationPct = 0.03, generalInflationPct = 0.025, sellingCostPct = 0.06, closingCostBuyPct = 0.025, marginalTaxRatePct = 0.25, horizonYears, useTaxShield = true } = inputs;\n    // All percentage fields are decimals (e.g., 0.2 for 20%)\n    const downPayment = purchasePrice * downPaymentPct;\n    const loanAmount = purchasePrice - downPayment;\n    const monthlyMortgageRate = mortgageRatePct / 12;\n    const numberOfMonths = mortgageTermYears * 12;\n    // Monthly mortgage payment (fixed rate)\n    const monthlyMortgagePayment = monthlyMortgageRate * loanAmount / (1 - Math.pow(1 + monthlyMortgageRate, -numberOfMonths));\n    let remainingMortgage = loanAmount;\n    let homeValue = purchasePrice;\n    let rentPortfolioValue = downPayment + purchasePrice * closingCostBuyPct;\n    let cumulativeBuyCost = downPayment + purchasePrice * closingCostBuyPct;\n    let cumulativeRentCost = 0;\n    const yearlyData = [];\n    const buyCashFlows = [];\n    const rentCashFlows = [];\n    for(let year = 1; year <= horizonYears; year++){\n        let yearlyMortgageInterest = 0;\n        let yearlyPrincipalPaid = 0;\n        for(let month = 1; month <= 12; month++){\n            const interest = remainingMortgage * monthlyMortgageRate;\n            const principal = monthlyMortgagePayment - interest;\n            yearlyMortgageInterest += interest;\n            yearlyPrincipalPaid += principal;\n            remainingMortgage -= principal;\n        }\n        // Home value appreciates\n        homeValue *= 1 + homeAppreciationPct;\n        const propertyTax = purchasePrice * propertyTaxPct;\n        const maintenance = purchasePrice * maintenancePct;\n        // Tax shield (if enabled)\n        const taxShield = useTaxShield ? (yearlyMortgageInterest + propertyTax) * marginalTaxRatePct : 0;\n        // Total annual cost of owning\n        const annualBuyCost = monthlyMortgagePayment * 12 + propertyTax + maintenance + insuranceHOAAnnual - taxShield;\n        cumulativeBuyCost += annualBuyCost;\n        // Total annual rent (with inflation)\n        const annualRent = monthlyRent * 12 * Math.pow(1 + rentInflationPct, year - 1);\n        cumulativeRentCost += annualRent;\n        // Equity = home value - remaining mortgage\n        const buyEquity = homeValue - remainingMortgage;\n        // Opportunity cost: invest the difference each year\n        const savingsVsBuying = annualBuyCost - annualRent;\n        rentPortfolioValue = rentPortfolioValue * (1 + altReturnPct) + savingsVsBuying;\n        yearlyData.push({\n            year,\n            buyTotalCost: cumulativeBuyCost,\n            rentTotalCost: cumulativeRentCost,\n            buyEquity,\n            rentPortfolioValue,\n            buyNetCost: cumulativeBuyCost - buyEquity,\n            rentNetCost: cumulativeRentCost - rentPortfolioValue\n        });\n        buyCashFlows.push(cumulativeBuyCost - buyEquity);\n        rentCashFlows.push(cumulativeRentCost - rentPortfolioValue);\n    }\n    // At the end, sell the home and pay off the remaining mortgage and selling costs\n    const finalHomeSaleProceeds = homeValue * (1 - sellingCostPct) - remainingMortgage;\n    const finalBuyEquity = finalHomeSaleProceeds;\n    const finalBuyTotalCost = cumulativeBuyCost - finalHomeSaleProceeds;\n    // NPV calculation (discounted at altReturnPct)\n    const calculateNPV = (cashFlows, rate)=>{\n        return cashFlows.reduce((acc, val, i)=>acc + val / Math.pow(1 + rate, i + 1), 0);\n    };\n    const buyNpv = calculateNPV(buyCashFlows, altReturnPct);\n    const rentNpv = calculateNPV(rentCashFlows, altReturnPct);\n    // Debug output: show detailed breakdown\n    if (true) {\n        console.log(\"--- Buy vs Rent Calculation Debug ---\");\n        console.log(\"Buy cash flows (discounted):\", buyCashFlows.map((v, i)=>v / Math.pow(1 + altReturnPct, i + 1)));\n        console.log(\"Rent cash flows (discounted):\", rentCashFlows.map((v, i)=>v / Math.pow(1 + altReturnPct, i + 1)));\n        console.log(\"Final home sale proceeds (buy):\", finalHomeSaleProceeds);\n        console.log(\"Final portfolio value (rent):\", rentPortfolioValue);\n        console.log(\"Buy NPV:\", buyNpv);\n        console.log(\"Rent NPV:\", rentNpv);\n        console.log(\"-------------------------------------\");\n    }\n    // Break-even year: when buying becomes cheaper than renting\n    let breakEvenYear = null;\n    for (const item of yearlyData){\n        if (item.buyNetCost < item.rentNetCost) {\n            breakEvenYear = item.year;\n            break;\n        }\n    }\n    // Update the last year with the final equity and net cost\n    if (yearlyData.length > 0) {\n        yearlyData[yearlyData.length - 1].buyEquity = finalBuyEquity;\n        yearlyData[yearlyData.length - 1].buyNetCost = finalBuyTotalCost;\n    }\n    return {\n        yearlyData,\n        buyTotalCost: finalBuyTotalCost,\n        rentTotalCost: yearlyData[yearlyData.length - 1].rentTotalCost,\n        buyNpv,\n        rentNpv,\n        breakEvenYear\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/calc.ts\n"));

/***/ })

});